name: Build & Release

# Trigger on push to master branch or with a tag
on:
  push:
    branches:
      - '**'
    tags:
      - '0.*'

# If previous workflow is still running, we push again, we will cancel the previous workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  Build:
    name: Build ${{ matrix.target }}
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    runs-on: ${{ matrix.os }}
    env:
      FLUTTER_VERSION: 3.29.3
      FVP_DEPS_URL: https://github.com/wang-bin/mdk-sdk/releases/latest/download/
      FVP_DEPS_LATEST: 1 # Set globally to force latest nightly for all platforms
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: Android
            os: ubuntu-latest
            artifact_name: release-Android
            artifact_path: build/app/outputs/apk/release/*.apk
          - target: Windows
            os: windows-latest
            artifact_name: release-Windows
            artifact_path: build/windows/*.zip
            arch: x64
          - target: Linux
            os: ubuntu-22.04
            arch: amd64
            artifact_name: release-Linux-amd64
            artifact_path: build/linux/
          - target: iOS
            os: macos-latest
            cache_pod_key: ios-pods
            cache_pod_path: ios/Pods
            cache_pod_restore_keys_hash_file: ios/Podfile.lock
            artifact_name: release-iOS
            artifact_path: build/**/*.ipa
          - target: macOS
            os: macos-latest
            cache_pod_key: macos-pods
            cache_pod_path: macos/Pods
            cache_pod_restore_keys_hash_file: macos/Podfile.lock
            artifact_name: release-macOS
            artifact_path: NipaPlay_*_macOS_Universal.dmg
    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      # Get app version
      - name: Get app version
        id: get_version
        run: |
          echo "::set-output name=version::$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2)"
      
      # Setup Android keystore (for Android)
      - name: Setup Android keystore
        if: matrix.target == 'Android'
        run: |
          echo "${{ secrets.ENCODED_KEYSTORE }}" | base64 -di > android/app/upload-keystore.jks
          echo "${{ secrets.KEY_PROPERTIES }}" > android/key.properties
      
      # Setup Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2.12.0
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
      
      # Cache CocoaPods (for iOS/macOS)
      - name: Cache Pod
        if: matrix.cache_pod_key != null
        uses: actions/cache@v4
        with:
          key: ${{ matrix.cache_pod_key }}
          path: ${{ matrix.cache_pod_path }}
          restore-keys: ${{ matrix.cache_pod_key }}-${{ hashFiles(matrix.cache_pod_restore_keys_hash_file) }}
      
      # Setup JDK for Android
      - name: Setup JDK 21 (Android)
        if: matrix.target == 'Android'
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '21'
          cache: gradle

      # Build Android
      - name: Build Android
        if: matrix.target == 'Android'
        run: |
          flutter build apk --release --split-per-abi
          cd build/app/outputs/apk/release
          mv app-arm64-v8a-release.apk NipaPlay-${{ steps.get_version.outputs.version }}-Android-arm64.apk
          mv app-armeabi-v7a-release.apk NipaPlay-${{ steps.get_version.outputs.version }}-Android-arm32.apk
          mv app-x86_64-release.apk NipaPlay-${{ steps.get_version.outputs.version }}-Android-x86_64.apk
      
      # Xcode build for iOS/macOS
      - name: Build Xcode (iOS/macOS)
        if: matrix.os == 'macos-latest'
        run: xcodebuild -resolvePackageDependencies -workspace ios/Runner.xcworkspace -scheme Runner -configuration Release
      
      # Flutter Pub Get
      - name: Flutter Pub Get
        run: |
          git config --global core.longpaths true
          flutter pub get
      
      # Build iOS .ipa
      - name: Build iOS
        if: matrix.target == 'iOS'
        run: |
          cd ios
          pod update
          cd ..
          flutter build ios --release --no-codesign
          sh thin-payload.sh build/ios/iphoneos/*.app
          cd build
          mkdir -p Payload
          mv ios/iphoneos/*.app Payload
          zip -9 NipaPlay_${{ steps.get_version.outputs.version }}_iOS_arm64.ipa -r Payload
      
      # macOS build steps restructured
      - name: Prepare macOS build environment
        if: matrix.target == 'macOS'
        run: |
          cd macos
          export LANG=zh_CN.UTF-8
          export LC_ALL=zh_CN.UTF-8
          mkdir -p ~/.cocoapods
          echo 'source "https://cdn.cocoapods.org/"' > ~/.cocoapods/config
          echo "Cleaning existing Pods and cache for a fresh mdk nightly..."
          rm -rf Pods Podfile.lock
          pod cache clean fvp || true # Clean fvp pod's cache, which handles mdk
          pod cache clean --all
          echo "Running pod install --repo-update (this will run fvp/apple_deps.sh to get mdk nightly)..."
          pod install --repo-update
          cd ..

      - name: Build macOS App
        if: matrix.target == 'macOS'
        run: |
          flutter build macos --release

      - name: Copy mdk.framework.dSYM to App Bundle (macOS)
        if: matrix.target == 'macOS'
        run: |
          echo "Attempting to copy mdk.framework.dSYM for symbolication..."
          # Based on previous logs, mdk artifacts (framework & dSYM) seem to be placed 
          # in macos/Pods/mdk/ by the apple_deps.sh script (run during 'pod install').
          # This script previously checked macos/Pods/fvp/mdk.framework.dSYM.
          MDK_ARTIFACTS_DIR="macos/Pods/mdk"
          DSYM_SOURCE_PATH="${MDK_ARTIFACTS_DIR}/mdk.framework.dSYM"
          
          APP_BUNDLE_NAME="NipaPlay.app" # Consistent with dmg.sh and Linux app name
          APP_BUNDLE_ROOT_DIR="build/macos/Build/Products/Release"
          TARGET_DSYM_DIR="${APP_BUNDLE_ROOT_DIR}/${APP_BUNDLE_NAME}/Contents/Frameworks"

          if [ -d "$DSYM_SOURCE_PATH" ]; then
            echo "Found mdk.framework.dSYM at $DSYM_SOURCE_PATH"
            
            if [ ! -d "${APP_BUNDLE_ROOT_DIR}/${APP_BUNDLE_NAME}" ]; then
              echo "Error: App bundle ${APP_BUNDLE_ROOT_DIR}/${APP_BUNDLE_NAME} not found after flutter build."
              echo "Listing contents of ${APP_BUNDLE_ROOT_DIR}/:"
              ls -la "${APP_BUNDLE_ROOT_DIR}/"
              exit 1
            fi
            
            if [ ! -d "$TARGET_DSYM_DIR" ]; then
               echo "Warning: Target Frameworks directory $TARGET_DSYM_DIR does not exist. Will attempt to create it."
               mkdir -p "$TARGET_DSYM_DIR"
            fi

            echo "Copying $DSYM_SOURCE_PATH to $TARGET_DSYM_DIR/"
            cp -R "$DSYM_SOURCE_PATH" "$TARGET_DSYM_DIR/"
            if [ $? -eq 0 ]; then
              echo "Successfully copied mdk.framework.dSYM from $DSYM_SOURCE_PATH."
              echo "Contents of $TARGET_DSYM_DIR after copy:"
              ls -la "$TARGET_DSYM_DIR"
            else
              echo "Error: Failed to copy mdk.framework.dSYM from $DSYM_SOURCE_PATH."
              exit 1 # Fail the build if dSYM is found but cannot be copied
            fi
          else
            echo "Warning: mdk.framework.dSYM not found at the revised expected path $DSYM_SOURCE_PATH."
            echo "This script previously checked macos/Pods/fvp/mdk.framework.dSYM."
            echo "Listing contents of macos/Pods/ (if it exists):"
            ls -la "macos/Pods/" || echo "macos/Pods/ directory does not exist."
            echo "Listing contents of ${MDK_ARTIFACTS_DIR}/ (if it exists, this is where dSYM was expected):"
            ls -la "${MDK_ARTIFACTS_DIR}/" || echo "${MDK_ARTIFACTS_DIR}/ directory does not exist or is not accessible."
            echo "Symbolicated crash logs for mdk might not be available."
            # This is a warning, build continues.
          fi

      - name: Package macOS .dmg
        if: matrix.target == 'macOS'
        run: |
          brew install create-dmg imagemagick
          chmod +x dmg.sh
          ./dmg.sh
          echo "Listing final DMG:"
          ls -la *.dmg
      
      # Build Windows .zip
      - name: Build Windows
        if: matrix.target == 'Windows'
        shell: pwsh
        run: |
          flutter build windows --release
          $arch = "${{ matrix.arch }}"
          $version = "${{ steps.get_version.outputs.version }}"
          if ($arch -eq "arm64") {
            $DestDir = "build\\windows\\NipaPlay_${version}_Windows_arm64"
            $SrcDir = "build\\windows\\arm64\\runner\\Release"
          } else {
            $DestDir = "build\\windows\\NipaPlay_${version}_Windows_x64"
            $SrcDir = "build\\windows\\x64\\runner\\Release"
          }
          New-Item -Path $DestDir -ItemType Directory -Force
          Copy-Item -Path "$SrcDir\\*" -Destination $DestDir -Recurse -Force
          Copy-Item -Path "windows\\*.dll" -Destination $DestDir -Force
          Compress-Archive -Path $DestDir -DestinationPath "build\\windows\\NipaPlay_${version}_Windows_x64.zip" -Force
      
      # Build Linux .deb
      - name: Install Linux build dependencies
        if: matrix.target == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y mpv libmpv-dev pkg-config clang cmake libgtk-3-dev ninja-build libasound2-dev libass-dev fuse libfuse2 libqt5svg5 p7zip-full rpm desktop-file-utils libsqlite3-dev libcanberra-gtk3-module gtk3-nocsd libgtk3-nocsd0

      - name: Ensure mdk-sdk is available for Linux build
        if: matrix.target == 'Linux'
        run: |
          echo "Ensuring mdk-sdk is available for Linux build..."
          # Attempt to download mdk-sdk directly and verify it
          MDK_SDK_DIR="linux/flutter/ephemeral/.plugin_symlinks/fvp"
          mkdir -p "${MDK_SDK_DIR}"
          
          # First try SourceForge
          echo "Trying to download mdk-sdk from SourceForge..."
          SF_MDK_URL="https://sourceforge.net/projects/mdk-sdk/files/nightly/mdk-sdk-linux-x64.tar.xz"
          wget -q --tries=3 ${SF_MDK_URL} -O "${MDK_SDK_DIR}/mdk-sdk-linux-x64.tar.xz"
          
          # Check if download succeeded
          if [ -s "${MDK_SDK_DIR}/mdk-sdk-linux-x64.tar.xz" ]; then
            echo "Successfully downloaded mdk-sdk from SourceForge"
          else
            # Fallback to GitHub
            echo "SourceForge download failed, trying GitHub..."
            GITHUB_MDK_URL="https://github.com/wang-bin/mdk-sdk/releases/latest/download/mdk-sdk-linux-x64.tar.xz"
            wget -q --tries=3 ${GITHUB_MDK_URL} -O "${MDK_SDK_DIR}/mdk-sdk-linux-x64.tar.xz"
            
            if [ ! -s "${MDK_SDK_DIR}/mdk-sdk-linux-x64.tar.xz" ]; then
              echo "WARNING: Both SourceForge and GitHub downloads failed. Build might fail later."
            else
              echo "Successfully downloaded mdk-sdk from GitHub"
            fi
          fi
          
          # If we have a valid tarball, extract it
          if [ -s "${MDK_SDK_DIR}/mdk-sdk-linux-x64.tar.xz" ]; then
            echo "Extracting mdk-sdk..."
            tar -xf "${MDK_SDK_DIR}/mdk-sdk-linux-x64.tar.xz" -C "${MDK_SDK_DIR}"
            
            if [ -d "${MDK_SDK_DIR}/mdk-sdk" ]; then
              echo "mdk-sdk extracted successfully"
              echo "Listing mdk-sdk contents:"
              find "${MDK_SDK_DIR}/mdk-sdk" -name "*mpv*" -type f || echo "No mpv files found in mdk-sdk"
              
              # 详细列出所有libmpv相关文件
              echo "Detailed libmpv files in mdk-sdk:"
              find "${MDK_SDK_DIR}/mdk-sdk" -name "*mpv*" -type f -exec ls -la {} \; || echo "No detailed libmpv files found"
            else
              echo "WARNING: Extraction failed or directory structure is unexpected"
            fi
          fi
          
          # 创建一个专用函数来确保libmpv.so.1的存在
          create_libmpv_so1() {
            local TARGET_DIR="$1"
            local ORIGINAL_DIR=$(pwd)
            echo "=== Ensuring libmpv.so.1 exists in ${TARGET_DIR} ==="
            
            cd "${TARGET_DIR}"
            
            # 详细列出所有mpv相关文件
            echo "Current mpv files in ${TARGET_DIR}:"
            find . -name "*mpv*" -type f -exec ls -la {} \; || echo "No mpv files found"
            
            # 强制创建libmpv.so.1的多种策略
            LIBMPV_SO1_CREATED=false
            
            # 策略1: 如果存在libmpv.so.2，创建符号链接
            if [ -f "libmpv.so.2" ]; then
              ln -sf libmpv.so.2 libmpv.so.1
              echo "✓ Strategy 1: Created symlink libmpv.so.1 -> libmpv.so.2"
              LIBMPV_SO1_CREATED=true
            fi
            
            # 策略2: 如果存在具体版本号的libmpv.so文件
            if [ ! -f "libmpv.so.1" ]; then
              for mpv_file in libmpv.so.2.* libmpv.so.*; do
                if [ -f "$mpv_file" ]; then
                  ln -sf "$mpv_file" libmpv.so.1
                  ln -sf "$mpv_file" libmpv.so.2 2>/dev/null || true
                  echo "✓ Strategy 2: Created symlink libmpv.so.1 -> $mpv_file"
                  LIBMPV_SO1_CREATED=true
                  break
                fi
              done
            fi
            
            # 策略3: 查找任何libmpv.*文件并创建链接
            if [ ! -f "libmpv.so.1" ]; then
              LIBMPV_FILE=$(find . -name "libmpv.*" -type f | head -1)
              if [ -n "$LIBMPV_FILE" ]; then
                ln -sf "$(basename "$LIBMPV_FILE")" libmpv.so.1
                echo "✓ Strategy 3: Created symlink libmpv.so.1 -> $(basename "$LIBMPV_FILE")"
                LIBMPV_SO1_CREATED=true
              fi
            fi
            
            # 策略4: 从系统复制libmpv并重命名为.so.1
            if [ ! -f "libmpv.so.1" ]; then
              echo "Searching system for libmpv libraries..."
              SYSTEM_LIBMPV=$(find /usr/lib* -name "libmpv.so*" -type f 2>/dev/null | head -1)
              if [ -n "$SYSTEM_LIBMPV" ]; then
                cp "$SYSTEM_LIBMPV" ./libmpv.so.1
                chmod 755 ./libmpv.so.1
                echo "✓ Strategy 4: Copied system libmpv ($SYSTEM_LIBMPV) as libmpv.so.1"
                LIBMPV_SO1_CREATED=true
              fi
            fi
            
            # 策略5: 强制下载最新的libmpv.so.1（最后手段）
            if [ ! -f "libmpv.so.1" ]; then
              echo "All strategies failed, trying to download compatible libmpv.so.1..."
              # 尝试下载一个已知兼容的libmpv.so.1版本
              wget -q --tries=2 "https://github.com/shinchiro/mpv-winbuild-cmake/releases/download/20231015/mpv-dev-x86_64-20231015-git-d678618.7z" -O temp_mpv.7z 2>/dev/null || true
              if [ -f "temp_mpv.7z" ]; then
                echo "Downloaded backup mpv package, but 7z extraction not implemented in this strategy"
                rm -f temp_mpv.7z
              fi
            fi
            
            # 最终验证
            if [ -f "libmpv.so.1" ]; then
              echo "✅ SUCCESS: libmpv.so.1 is now available!"
              ls -la libmpv.so*
              # 验证文件是否可执行/可链接
              if file libmpv.so.1 | grep -q "ELF.*shared object"; then
                echo "✅ libmpv.so.1 appears to be a valid shared library"
              else
                echo "⚠️  WARNING: libmpv.so.1 may not be a valid shared library"
                file libmpv.so.1
              fi
            else
              echo "❌ CRITICAL: Failed to create libmpv.so.1 using all strategies!"
              echo "Available files:"
              ls -la . | grep -i mpv || echo "No mpv files found"
              cd "$ORIGINAL_DIR"
              return 1
            fi
            
            cd "$ORIGINAL_DIR"
            return 0
          }
          
          # 如果mdk-sdk可用，预先处理libmpv.so.1
          if [ -d "${MDK_SDK_DIR}/mdk-sdk" ]; then
            echo "Pre-processing libmpv.so.1 in mdk-sdk..."
            MDK_LIB_DIR=$(find "${MDK_SDK_DIR}/mdk-sdk" -type d -name "*lib*" | head -1)
            if [ -n "$MDK_LIB_DIR" ]; then
              create_libmpv_so1 "$MDK_LIB_DIR" || echo "Warning: Could not create libmpv.so.1 in mdk-sdk"
            fi
          fi
          
          # Fallback: try to use system libmpv if mdk-sdk fails
          if [ ! -d "${MDK_SDK_DIR}/mdk-sdk" ]; then
            echo "mdk-sdk not available, will use system libmpv as fallback"
            echo "System libmpv libraries:"
            find /usr/lib -name "*mpv*" -type f || echo "No system libmpv found"
          fi

      - name: Build Linux
        if: matrix.target == 'Linux'
        run: |
          flutter build linux --release
      - name: Linux packaging and cleanup
        if: matrix.target == 'Linux'
        shell: /usr/bin/bash -e {0}
        run: |
          # 重新定义libmpv.so.1创建函数（确保在打包阶段可用）
          create_libmpv_so1() {
            local TARGET_DIR="$1"
            local ORIGINAL_DIR=$(pwd)
            echo "=== Ensuring libmpv.so.1 exists in ${TARGET_DIR} ==="
            
            cd "${TARGET_DIR}"
            
            # 详细列出所有mpv相关文件
            echo "Current mpv files in ${TARGET_DIR}:"
            find . -name "*mpv*" -type f -exec ls -la {} \; || echo "No mpv files found"
            
            # 强制创建libmpv.so.1的多种策略
            LIBMPV_SO1_CREATED=false
            
            # 策略1: 如果存在libmpv.so.2，创建符号链接
            if [ -f "libmpv.so.2" ]; then
              ln -sf libmpv.so.2 libmpv.so.1
              echo "✓ Strategy 1: Created symlink libmpv.so.1 -> libmpv.so.2"
              LIBMPV_SO1_CREATED=true
            fi
            
            # 策略2: 如果存在具体版本号的libmpv.so文件
            if [ ! -f "libmpv.so.1" ]; then
              for mpv_file in libmpv.so.2.* libmpv.so.*; do
                if [ -f "$mpv_file" ]; then
                  ln -sf "$mpv_file" libmpv.so.1
                  ln -sf "$mpv_file" libmpv.so.2 2>/dev/null || true
                  echo "✓ Strategy 2: Created symlink libmpv.so.1 -> $mpv_file"
                  LIBMPV_SO1_CREATED=true
                  break
                fi
              done
            fi
            
            # 策略3: 查找任何libmpv.*文件并创建链接
            if [ ! -f "libmpv.so.1" ]; then
              LIBMPV_FILE=$(find . -name "libmpv.*" -type f | head -1)
              if [ -n "$LIBMPV_FILE" ]; then
                ln -sf "$(basename "$LIBMPV_FILE")" libmpv.so.1
                echo "✓ Strategy 3: Created symlink libmpv.so.1 -> $(basename "$LIBMPV_FILE")"
                LIBMPV_SO1_CREATED=true
              fi
            fi
            
            # 策略4: 从系统复制libmpv并重命名为.so.1
            if [ ! -f "libmpv.so.1" ]; then
              echo "Searching system for libmpv libraries..."
              SYSTEM_LIBMPV=$(find /usr/lib* -name "libmpv.so*" -type f 2>/dev/null | head -1)
              if [ -n "$SYSTEM_LIBMPV" ]; then
                cp "$SYSTEM_LIBMPV" ./libmpv.so.1
                chmod 755 ./libmpv.so.1
                echo "✓ Strategy 4: Copied system libmpv ($SYSTEM_LIBMPV) as libmpv.so.1"
                LIBMPV_SO1_CREATED=true
              fi
            fi
            
            # 策略5: 强制下载最新的libmpv.so.1（最后手段）
            if [ ! -f "libmpv.so.1" ]; then
              echo "All strategies failed, trying to download compatible libmpv.so.1..."
              # 尝试下载一个已知兼容的libmpv.so.1版本
              wget -q --tries=2 "https://github.com/shinchiro/mpv-winbuild-cmake/releases/download/20231015/mpv-dev-x86_64-20231015-git-d678618.7z" -O temp_mpv.7z 2>/dev/null || true
              if [ -f "temp_mpv.7z" ]; then
                echo "Downloaded backup mpv package, but 7z extraction not implemented in this strategy"
                rm -f temp_mpv.7z
              fi
            fi
            
            # 最终验证
            if [ -f "libmpv.so.1" ]; then
              echo "✅ SUCCESS: libmpv.so.1 is now available!"
              ls -la libmpv.so*
              # 验证文件是否可执行/可链接
              if file libmpv.so.1 | grep -q "ELF.*shared object"; then
                echo "✅ libmpv.so.1 appears to be a valid shared library"
              else
                echo "⚠️  WARNING: libmpv.so.1 may not be a valid shared library"
                file libmpv.so.1
              fi
            else
              echo "❌ CRITICAL: Failed to create libmpv.so.1 using all strategies!"
              echo "Available files:"
              ls -la . | grep -i mpv || echo "No mpv files found"
              cd "$ORIGINAL_DIR"
              return 1
            fi
            
            cd "$ORIGINAL_DIR"
            return 0
          }
          
          # AMD64 build - Install dependencies
          echo "Updating package lists..."
          sudo apt-get update -y
          if [ $? -ne 0 ]; then echo "apt-get update failed!"; exit 1; fi
          
          echo "Installing core dependencies..."
          # Install dependencies including fuse for AppImage, qt for linuxdeployqt, rpm tools, and desktop-file-utils for RPM build
          sudo apt-get install -y mpv libmpv-dev pkg-config clang cmake libgtk-3-dev ninja-build libasound2-dev libass-dev fuse libfuse2 libqt5svg5 p7zip-full rpm desktop-file-utils libsqlite3-dev libcanberra-gtk3-module gtk3-nocsd libgtk3-nocsd0
          if [ $? -ne 0 ]; then echo "apt-get install failed!"; exit 1; fi
          
          echo "Verifying core tools installation (especially desktop-file-utils)..."
          which desktop-file-install || (echo "desktop-file-install command not found! Check desktop-file-utils installation." && exit 1)
          which rpmbuild || (echo "rpmbuild command not found! Check rpm package installation." && exit 1)
          rpmbuild --version || (echo "rpmbuild --version failed!" && exit 1)
          echo "Core tools verified."

          # Define variables
          APP_NAME="NipaPlay" # Change if your app name is different
          APP_NAME_LOWER="nipaplay" # Lowercase for paths/executable
          VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2)
          ARCH="amd64" # Assuming amd64 from matrix
          BUILD_OUTPUT_DIR="build/linux/x64/release/bundle"
          LINUX_BUILD_DIR="build/linux"
          DEB_PKG_NAME="${APP_NAME}-${VERSION}-Linux-${ARCH}"
          APPIMAGE_NAME="${APP_NAME}-${VERSION}-Linux-${ARCH}.AppImage"
          ARCHIVE_NAME="${APP_NAME}-${VERSION}-Linux-${ARCH}.tar.gz"
          DESKTOP_FILE_NAME="io.github.MCDFsteve.NipaPlay-Reload.desktop" # Match your actual desktop file name
          ICON_NAME="io.github.MCDFsteve.NipaPlay-Reload.png" # Match icon name used in desktop file if specific
          ICON_SOURCE_PATH="assets/images/logo512.png" # Corrected path relative to root
          ASSETS_LINUX_DIR="assets/linux" # Corrected path relative to root
          RPM_SPEC_TEMPLATE="${ASSETS_LINUX_DIR}/nipaplay.spec.template"
          RPM_SPEC_FILE="nipaplay.spec" # Will be placed in SPECS dir
          RPM_PKG_NAME="${APP_NAME}-${VERSION}-1.${ARCH}.rpm" # Adjust if Release tag in spec changes
          
          echo "--- Starting Packaging ---"
          echo "Version: ${VERSION}, Arch: ${ARCH}"
          echo "Build Output: ${BUILD_OUTPUT_DIR}"
          echo "Linux Build Dir: ${LINUX_BUILD_DIR}"
          
          # --- Create .deb package ---
          echo "--- Creating .deb package ---"
          DEB_ROOT="${LINUX_BUILD_DIR}/${DEB_PKG_NAME}"
          mkdir -p "${DEB_ROOT}/opt/${APP_NAME_LOWER}"
          mkdir -p "${DEB_ROOT}/usr/share/applications"
          mkdir -p "${DEB_ROOT}/usr/share/icons/hicolor/512x512/apps"
          mkdir -p "${DEB_ROOT}/DEBIAN"
          chmod 0755 "${DEB_ROOT}/DEBIAN"
          
          # Copy app files
          echo "Copying application files to ${DEB_ROOT}/opt/${APP_NAME_LOWER}/"
          cp -r "${BUILD_OUTPUT_DIR}/"* "${DEB_ROOT}/opt/${APP_NAME_LOWER}/"
          
          # 复制 mdk-sdk 中的 libmpv 库到 .deb 包
          echo "Copying mdk-sdk libraries to ${DEB_ROOT}/opt/${APP_NAME_LOWER}/lib/"
          MDK_SDK_DIR="linux/flutter/ephemeral/.plugin_symlinks/fvp"
          if [ -d "${MDK_SDK_DIR}/mdk-sdk" ]; then
            echo "Finding libmpv.so in mdk-sdk..."
            find "${MDK_SDK_DIR}/mdk-sdk" -name "libmpv*.so*" -type f -exec cp -v {} "${DEB_ROOT}/opt/${APP_NAME_LOWER}/lib/" \;
            # 复制其他可能需要的 mdk 相关库
            find "${MDK_SDK_DIR}/mdk-sdk" -name "libmdk*.so*" -type f -exec cp -v {} "${DEB_ROOT}/opt/${APP_NAME_LOWER}/lib/" \;
          else
            echo "WARNING: mdk-sdk directory not found at ${MDK_SDK_DIR}/mdk-sdk"
            # 尝试从系统中查找 libmpv 并复制
            echo "Attempting to find system libmpv..."
            find /usr/lib -name "libmpv*.so*" -type f -exec cp -v {} "${DEB_ROOT}/opt/${APP_NAME_LOWER}/lib/" \;
          fi
          
          # 创建 libmpv 兼容性符号链接 - 使用增强的函数
          echo "Ensuring libmpv.so.1 availability in .deb package..."
          create_libmpv_so1 "${DEB_ROOT}/opt/${APP_NAME_LOWER}/lib/" || {
            echo "ERROR: Failed to ensure libmpv.so.1 in .deb package"
            exit 1
          }
          
          # Create DEBIAN/control from template
          echo "Creating DEBIAN/control"
          sed -e "s/VERSION_PLACEHOLDER/${VERSION}/g" \
              -e "s/ARCH_PLACEHOLDER/${ARCH}/g" \
              "${ASSETS_LINUX_DIR}/DEBIAN/control.template" > "${DEB_ROOT}/DEBIAN/control"
          
          # Copy postinst/postrm scripts if they exist
          if [ -f "${ASSETS_LINUX_DIR}/DEBIAN/postinst" ]; then
            echo "Copying postinst script"
            cp "${ASSETS_LINUX_DIR}/DEBIAN/postinst" "${DEB_ROOT}/DEBIAN/"
            chmod 0755 "${DEB_ROOT}/DEBIAN/postinst"
          fi
          if [ -f "${ASSETS_LINUX_DIR}/DEBIAN/postrm" ]; then
            echo "Copying postrm script"
            cp "${ASSETS_LINUX_DIR}/DEBIAN/postrm" "${DEB_ROOT}/DEBIAN/"
            chmod 0755 "${DEB_ROOT}/DEBIAN/postrm"
          fi
          
          # Copy desktop file and icon
          echo "Copying desktop file and icon"
          echo "Current working directory: $(pwd)"
          echo "Checking if desktop file exists: ${ASSETS_LINUX_DIR}/${DESKTOP_FILE_NAME}"
          ls -la "${ASSETS_LINUX_DIR}/${DESKTOP_FILE_NAME}" || echo "Desktop file not found!"
          cp "${ASSETS_LINUX_DIR}/${DESKTOP_FILE_NAME}" "${DEB_ROOT}/usr/share/applications/"
          cp "${ICON_SOURCE_PATH}" "${DEB_ROOT}/usr/share/icons/hicolor/512x512/apps/${ICON_NAME}"
          
          # Build the .deb package
          echo "Building .deb package..."
          dpkg-deb --build --root-owner-group "${DEB_ROOT}" "${LINUX_BUILD_DIR}/${DEB_PKG_NAME}.deb"
          echo ".deb package created at ${LINUX_BUILD_DIR}/${DEB_PKG_NAME}.deb"
          
          # --- Create AppImage using linuxdeployqt ---
          echo "--- Creating AppImage ---"
          APPDIR="${LINUX_BUILD_DIR}/${APP_NAME}-AppDir"
          
          mkdir -p "${APPDIR}/lib"
          mkdir -p "${APPDIR}/data"
          
          # Copy main executable to AppDir root
          echo "Copying executable to AppDir root"
          cp "${BUILD_OUTPUT_DIR}/${APP_NAME}" "${APPDIR}/"
          
          # Copy contents of bundle/lib to AppDir/lib
          echo "Copying lib/* to AppDir/lib/"
          cp -r "${BUILD_OUTPUT_DIR}/lib/." "${APPDIR}/lib/"
          
          # Copy contents of bundle/data to AppDir/data
          echo "Copying data/* to AppDir/data/"
          cp -r "${BUILD_OUTPUT_DIR}/data/." "${APPDIR}/data/"
          
          # 复制 mdk-sdk 中的 libmpv 库到 AppImage
          echo "Copying mdk-sdk libraries to AppImage"
          MDK_SDK_DIR="linux/flutter/ephemeral/.plugin_symlinks/fvp"
          if [ -d "${MDK_SDK_DIR}/mdk-sdk" ]; then
            echo "Finding libmpv.so in mdk-sdk for AppImage..."
            find "${MDK_SDK_DIR}/mdk-sdk" -name "libmpv*.so*" -type f -exec cp -v {} "${APPDIR}/lib/" \;
            # 复制其他可能需要的 mdk 相关库
            find "${MDK_SDK_DIR}/mdk-sdk" -name "libmdk*.so*" -type f -exec cp -v {} "${APPDIR}/lib/" \;
          else
            echo "WARNING: mdk-sdk directory not found at ${MDK_SDK_DIR}/mdk-sdk"
            # 尝试从系统中查找 libmpv 并复制
            echo "Attempting to find system libmpv for AppImage..."
            find /usr/lib -name "libmpv*.so*" -type f -exec cp -v {} "${APPDIR}/lib/" \;
          fi
          
          # 创建 libmpv 兼容性符号链接 - 使用增强的函数
          echo "Ensuring libmpv.so.1 availability in AppImage..."
          create_libmpv_so1 "${APPDIR}/lib/" || {
            echo "ERROR: Failed to ensure libmpv.so.1 in AppImage"
            exit 1
          }
          
          # Copy desktop file and icon to AppDir root
          echo "Copying desktop file and icon to AppDir root"
          echo "Current working directory: $(pwd)"
          echo "Checking if desktop file exists: ${ASSETS_LINUX_DIR}/${DESKTOP_FILE_NAME}"
          ls -la "${ASSETS_LINUX_DIR}/${DESKTOP_FILE_NAME}" || echo "Desktop file not found!"
          cp "${ASSETS_LINUX_DIR}/${DESKTOP_FILE_NAME}" "${APPDIR}/"
          cp "${ICON_SOURCE_PATH}" "${APPDIR}/${ICON_NAME}"
          
          # Download linuxdeployqt
          echo "Downloading linuxdeployqt..."
          wget -q https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage -O linuxdeployqt
          chmod +x linuxdeployqt
          
          # Run linuxdeployqt
          echo "Running linuxdeployqt..."
          export LD_LIBRARY_PATH="${APPDIR}/lib:${LD_LIBRARY_PATH}"
          chmod +x "${APPDIR}/${APP_NAME}"
          
          # 确保GTK模块在AppImage中可用
          echo "确保GTK模块可用..."
          mkdir -p "${APPDIR}/usr/lib/gtk-3.0/modules/"
          if [ -f "/usr/lib/x86_64-linux-gnu/gtk-3.0/modules/libcanberra-gtk-module.so" ]; then
            cp /usr/lib/x86_64-linux-gnu/gtk-3.0/modules/libcanberra-gtk-module.so "${APPDIR}/usr/lib/gtk-3.0/modules/"
          fi
          if [ -f "/usr/lib/gtk-3.0/modules/libcanberra-gtk-module.so" ]; then
            cp /usr/lib/gtk-3.0/modules/libcanberra-gtk-module.so "${APPDIR}/usr/lib/gtk-3.0/modules/"
          fi
          if [ -f "/usr/lib/x86_64-linux-gnu/gtk-3.0/modules/libgtk3-nocsd.so" ]; then
            cp /usr/lib/x86_64-linux-gnu/gtk-3.0/modules/libgtk3-nocsd.so "${APPDIR}/usr/lib/gtk-3.0/modules/"
          fi
          
          ./linuxdeployqt "${APPDIR}/${APP_NAME}" -appimage -bundle-non-qt-libs
          
          echo "Listing *.AppImage files in current directory after linuxdeployqt:"
          ls -la *.AppImage || echo "No AppImage found in current directory."
          
          # Find and rename the generated AppImage
          echo "Locating and renaming generated AppImage..."
          GENERATED_APPIMAGE=$(find . -maxdepth 1 -name "*.AppImage" -not -name "linuxdeployqt*.AppImage" -print -quit) 
          if [ -n "$GENERATED_APPIMAGE" ]; then
            echo "Found generated AppImage: $GENERATED_APPIMAGE"
            mv "$GENERATED_APPIMAGE" "${LINUX_BUILD_DIR}/${APPIMAGE_NAME}"
            echo "AppImage created at ${LINUX_BUILD_DIR}/${APPIMAGE_NAME}"
            echo "Checking if AppImage exists in build/linux:"
            ls -la "${LINUX_BUILD_DIR}/${APPIMAGE_NAME}" || echo "AppImage move failed or file not found in build/linux."
          else
            echo "AppImage generation failed or file not found by find command!"
          fi
          rm -f linuxdeployqt # Clean up downloaded tool
          
          # --- Create compressed binary archive (.tar.gz) ---
          echo "--- Creating .tar.gz archive ---"
          ARCHIVE_CONTENT_DIR="${LINUX_BUILD_DIR}/archive_content"
          mkdir -p "${ARCHIVE_CONTENT_DIR}"
          
          # Copy the essential runtime files from the build output
          echo "Copying application files to archive directory"
          cp -r "${BUILD_OUTPUT_DIR}/"* "${ARCHIVE_CONTENT_DIR}/"
          
          # 复制 mdk-sdk 中的 libmpv 库到 tar.gz 归档
          echo "Copying mdk-sdk libraries to tar.gz archive"
          MDK_SDK_DIR="linux/flutter/ephemeral/.plugin_symlinks/fvp"
          if [ -d "${MDK_SDK_DIR}/mdk-sdk" ]; then
            echo "Finding libmpv.so in mdk-sdk for tar.gz..."
            find "${MDK_SDK_DIR}/mdk-sdk" -name "libmpv*.so*" -type f -exec cp -v {} "${ARCHIVE_CONTENT_DIR}/lib/" \;
            # 复制其他可能需要的 mdk 相关库
            find "${MDK_SDK_DIR}/mdk-sdk" -name "libmdk*.so*" -type f -exec cp -v {} "${ARCHIVE_CONTENT_DIR}/lib/" \;
          else
            echo "WARNING: mdk-sdk directory not found at ${MDK_SDK_DIR}/mdk-sdk"
            # 尝试从系统中查找 libmpv 并复制
            echo "Attempting to find system libmpv for tar.gz..."
            find /usr/lib -name "libmpv*.so*" -type f -exec cp -v {} "${ARCHIVE_CONTENT_DIR}/lib/" \;
          fi
          
          # 创建 libmpv 兼容性符号链接 - 使用增强的函数
          echo "Ensuring libmpv.so.1 availability in tar.gz archive..."
          create_libmpv_so1 "${ARCHIVE_CONTENT_DIR}/lib/" || {
            echo "ERROR: Failed to ensure libmpv.so.1 in tar.gz archive"
            exit 1
          }
          
          # Add a simple run script using echo commands
          RUN_SCRIPT_PATH="${ARCHIVE_CONTENT_DIR}/run.sh"
          echo "Creating run.sh script at ${RUN_SCRIPT_PATH}"
          echo '#!/bin/sh' > "${RUN_SCRIPT_PATH}"
          echo '# Enhanced run script for NipaPlay binary archive with libmpv.so.1 support' >> "${RUN_SCRIPT_PATH}"
          echo 'DIR="$(dirname "$(readlink -f "$0")")"' >> "${RUN_SCRIPT_PATH}"
          echo 'export LD_LIBRARY_PATH="$DIR/lib:$LD_LIBRARY_PATH"' >> "${RUN_SCRIPT_PATH}"
          echo '# Set GTK_MODULES to ensure proper loading of required modules' >> "${RUN_SCRIPT_PATH}"
          echo 'export GTK_PATH="$DIR/usr/lib/gtk-3.0"' >> "${RUN_SCRIPT_PATH}"
          echo 'export GTK_CSD=0' >> "${RUN_SCRIPT_PATH}"
          echo 'export GTK3_NOCSD=1' >> "${RUN_SCRIPT_PATH}"
          echo '# Set MPV_HOME to help find mpv configuration' >> "${RUN_SCRIPT_PATH}"
          echo 'export MPV_HOME="$DIR"' >> "${RUN_SCRIPT_PATH}"
          echo '' >> "${RUN_SCRIPT_PATH}"
          echo '# Runtime libmpv.so.1 check and fix function' >> "${RUN_SCRIPT_PATH}"
          echo 'ensure_libmpv_so1() {' >> "${RUN_SCRIPT_PATH}"
          echo '  cd "$DIR/lib"' >> "${RUN_SCRIPT_PATH}"
          echo '  if [ ! -f "libmpv.so.1" ]; then' >> "${RUN_SCRIPT_PATH}"
          echo '    echo "⚠️  libmpv.so.1 not found! Attempting to create it..."' >> "${RUN_SCRIPT_PATH}"
          echo '    # Try to find any libmpv.so.* file and create symlink' >> "${RUN_SCRIPT_PATH}"
          echo '    for mpv_file in libmpv.so.2 libmpv.so.2.* libmpv.so.*; do' >> "${RUN_SCRIPT_PATH}"
          echo '      if [ -f "$mpv_file" ]; then' >> "${RUN_SCRIPT_PATH}"
          echo '        ln -sf "$mpv_file" libmpv.so.1' >> "${RUN_SCRIPT_PATH}"
          echo '        echo "✓ Created symlink: libmpv.so.1 -> $mpv_file"' >> "${RUN_SCRIPT_PATH}"
          echo '        break' >> "${RUN_SCRIPT_PATH}"
          echo '      fi' >> "${RUN_SCRIPT_PATH}"
          echo '    done' >> "${RUN_SCRIPT_PATH}"
          echo '    # If still not found, try system libmpv' >> "${RUN_SCRIPT_PATH}"
          echo '    if [ ! -f "libmpv.so.1" ]; then' >> "${RUN_SCRIPT_PATH}"
          echo '      SYSTEM_LIBMPV=$(find /usr/lib* -name "libmpv.so*" -type f 2>/dev/null | head -1)' >> "${RUN_SCRIPT_PATH}"
          echo '      if [ -n "$SYSTEM_LIBMPV" ]; then' >> "${RUN_SCRIPT_PATH}"
          echo '        cp "$SYSTEM_LIBMPV" libmpv.so.1' >> "${RUN_SCRIPT_PATH}"
          echo '        echo "✓ Copied system libmpv as libmpv.so.1"' >> "${RUN_SCRIPT_PATH}"
          echo '      else' >> "${RUN_SCRIPT_PATH}"
          echo '        echo "❌ ERROR: Could not find any libmpv library!"' >> "${RUN_SCRIPT_PATH}"
          echo '        echo "Please install libmpv-dev or mpv package on your system."' >> "${RUN_SCRIPT_PATH}"
          echo '        exit 1' >> "${RUN_SCRIPT_PATH}"
          echo '      fi' >> "${RUN_SCRIPT_PATH}"
          echo '    fi' >> "${RUN_SCRIPT_PATH}"
          echo '  fi' >> "${RUN_SCRIPT_PATH}"
          echo '}' >> "${RUN_SCRIPT_PATH}"
          echo '' >> "${RUN_SCRIPT_PATH}"
          echo '# Print library path for debugging' >> "${RUN_SCRIPT_PATH}"
          echo 'echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"' >> "${RUN_SCRIPT_PATH}"
          echo 'echo "Checking for libmpv.so:"' >> "${RUN_SCRIPT_PATH}"
          echo 'find "$DIR/lib" -name "libmpv*.so*" || echo "libmpv not found in $DIR/lib!"' >> "${RUN_SCRIPT_PATH}"
          echo '' >> "${RUN_SCRIPT_PATH}"
          echo '# Ensure libmpv.so.1 exists before launching' >> "${RUN_SCRIPT_PATH}"
          echo 'ensure_libmpv_so1' >> "${RUN_SCRIPT_PATH}"
          echo '' >> "${RUN_SCRIPT_PATH}"
          echo '# Execute the main binary' >> "${RUN_SCRIPT_PATH}"
          echo "\"\$DIR/${APP_NAME}\" \"\$@\"" >> "${RUN_SCRIPT_PATH}"
          chmod +x "${RUN_SCRIPT_PATH}"
          
          # Create the tarball
          echo "Creating tarball..."
          tar -czvf "${LINUX_BUILD_DIR}/${ARCHIVE_NAME}" -C "${ARCHIVE_CONTENT_DIR}" .
          echo ".tar.gz archive created at ${LINUX_BUILD_DIR}/${ARCHIVE_NAME}"
          echo "Listing contents of build/linux directory after tar:"
          ls -la "${LINUX_BUILD_DIR}/"
          
          # --- Create RPM package ---
          echo "--- Creating RPM package ---"
          RPM_BUILD_ROOT="${HOME}/rpmbuild"
          mkdir -p "${RPM_BUILD_ROOT}"/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          
          # Prepare sources for RPM build
          mkdir -p "${RPM_BUILD_ROOT}/SOURCES/bundle"
          cp -r "${BUILD_OUTPUT_DIR}/." "${RPM_BUILD_ROOT}/SOURCES/bundle/"
          cp "${ASSETS_LINUX_DIR}/${DESKTOP_FILE_NAME}" "${RPM_BUILD_ROOT}/SOURCES/"
          cp "${ICON_SOURCE_PATH}" "${RPM_BUILD_ROOT}/SOURCES/logo512.png"
          
          # Prepare spec file
          echo "Preparing RPM spec file..."
          sed -e "s/VERSION_PLACEHOLDER/${VERSION}/g" \
              "${RPM_SPEC_TEMPLATE}" > "${RPM_BUILD_ROOT}/SPECS/${RPM_SPEC_FILE}"
          
          echo "Contents of spec file:"
          cat "${RPM_BUILD_ROOT}/SPECS/${RPM_SPEC_FILE}"
          
          # Build RPM
          echo "Building RPM..."
          echo "Verifying desktop-file-install command..."
          which desktop-file-install || (echo "desktop-file-install command not found! Check desktop-file-utils installation." && exit 1)
          echo "desktop-file-utils seems to be installed correctly."
          rpmbuild -ba "${RPM_BUILD_ROOT}/SPECS/${RPM_SPEC_FILE}" --define "_topdir ${RPM_BUILD_ROOT}" --define "_sourcedir ${RPM_BUILD_ROOT}/SOURCES" --nodeps
          
          # Move the generated RPM to the final artifact directory
          echo "Moving RPM package..."
          RPM_ARCH_DIR="x86_64"
          GENERATED_RPM_PATH=$(find "${RPM_BUILD_ROOT}/RPMS/${RPM_ARCH_DIR}/" -name "nipaplay-${VERSION}*.rpm" -print -quit)
          DESIRED_RPM_NAME="NipaPlay-${VERSION}-Linux-${ARCH}.rpm"
          if [ -n "${GENERATED_RPM_PATH}" ]; then
            mv "${GENERATED_RPM_PATH}" "${LINUX_BUILD_DIR}/${DESIRED_RPM_NAME}"
            echo "RPM package moved and renamed to ${LINUX_BUILD_DIR}/${DESIRED_RPM_NAME}"
          else
            echo "Error: RPM file not found in ${RPM_BUILD_ROOT}/RPMS/${RPM_ARCH_DIR}/"
          fi
          echo "Listing contents of build/linux directory after RPM build:"
          ls -la "${LINUX_BUILD_DIR}/"
          
          # --- Verify libmpv.so.1 in all packages ---
          echo "=== Verifying libmpv.so.1 presence in all Linux packages ==="
          
          # Check .deb package
          echo "Checking .deb package for libmpv.so.1..."
          if [ -f "${LINUX_BUILD_DIR}/${DEB_PKG_NAME}.deb" ]; then
            if dpkg -c "${LINUX_BUILD_DIR}/${DEB_PKG_NAME}.deb" | grep -q "libmpv\.so\.1"; then
              echo "✅ libmpv.so.1 found in .deb package"
            else
              echo "❌ libmpv.so.1 NOT found in .deb package"
              echo "Contents related to libmpv:"
              dpkg -c "${LINUX_BUILD_DIR}/${DEB_PKG_NAME}.deb" | grep -i mpv || echo "No mpv files in .deb"
            fi
          fi
          
          # Check AppImage
          echo "Checking AppImage for libmpv.so.1..."
          if [ -f "${LINUX_BUILD_DIR}/${APPIMAGE_NAME}" ]; then
            # Extract and check AppImage contents
            TEMP_APPIMAGE_DIR="/tmp/appimage_check"
            mkdir -p "$TEMP_APPIMAGE_DIR"
            cd "$TEMP_APPIMAGE_DIR"
            "${LINUX_BUILD_DIR}/${APPIMAGE_NAME}" --appimage-extract > /dev/null 2>&1 || echo "AppImage extraction failed, trying alternative method"
            if [ -d "squashfs-root" ]; then
              if find squashfs-root -name "libmpv.so.1" | grep -q .; then
                echo "✅ libmpv.so.1 found in AppImage"
              else
                echo "❌ libmpv.so.1 NOT found in AppImage"
                echo "MPV files in AppImage:"
                find squashfs-root -name "*mpv*" -type f || echo "No mpv files in AppImage"
              fi
              rm -rf squashfs-root
            else
              echo "⚠️  Could not extract AppImage for verification"
            fi
            cd - > /dev/null
            rm -rf "$TEMP_APPIMAGE_DIR"
          fi
          
          # Check tar.gz archive
          echo "Checking tar.gz archive for libmpv.so.1..."
          if [ -f "${LINUX_BUILD_DIR}/${ARCHIVE_NAME}" ]; then
            if tar -tzf "${LINUX_BUILD_DIR}/${ARCHIVE_NAME}" | grep -q "libmpv\.so\.1"; then
              echo "✅ libmpv.so.1 found in tar.gz archive"
            else
              echo "❌ libmpv.so.1 NOT found in tar.gz archive"
              echo "MPV files in tar.gz:"
              tar -tzf "${LINUX_BUILD_DIR}/${ARCHIVE_NAME}" | grep -i mpv || echo "No mpv files in tar.gz"
            fi
          fi
          
          # Check RPM package
          echo "Checking RPM package for libmpv.so.1..."
          DESIRED_RPM_NAME_FOR_VERIFY="NipaPlay-${VERSION}-Linux-${ARCH}.rpm"
          if [ -f "${LINUX_BUILD_DIR}/${DESIRED_RPM_NAME_FOR_VERIFY}" ]; then
            if rpm -qlp "${LINUX_BUILD_DIR}/${DESIRED_RPM_NAME_FOR_VERIFY}" 2>/dev/null | grep -q "libmpv\.so\.1"; then
              echo "✅ libmpv.so.1 found in RPM package"
            else
              echo "❌ libmpv.so.1 NOT found in RPM package"
              echo "MPV files in RPM:"
              rpm -qlp "${LINUX_BUILD_DIR}/${DESIRED_RPM_NAME_FOR_VERIFY}" 2>/dev/null | grep -i mpv || echo "No mpv files in RPM"
            fi
          fi
          
          echo "=== libmpv.so.1 verification complete ==="
          
          # --- Final Check before Cleanup ---
          echo "Checking if all required Linux packages exist..."
          MISSING_FILES=false
          if [ ! -f "${LINUX_BUILD_DIR}/${DEB_PKG_NAME}.deb" ]; then
            echo "Error: .deb file not found! Expected: ${LINUX_BUILD_DIR}/${DEB_PKG_NAME}.deb"
            MISSING_FILES=true
          fi
          if [ ! -f "${LINUX_BUILD_DIR}/${APPIMAGE_NAME}" ]; then
            echo "Error: AppImage file not found! Expected: ${LINUX_BUILD_DIR}/${APPIMAGE_NAME}"
            MISSING_FILES=true
          fi
          if [ ! -f "${LINUX_BUILD_DIR}/${ARCHIVE_NAME}" ]; then
            echo "Error: .tar.gz file not found! Expected: ${LINUX_BUILD_DIR}/${ARCHIVE_NAME}"
            MISSING_FILES=true
          fi
          DESIRED_RPM_NAME_FOR_CHECK="NipaPlay-${VERSION}-Linux-${ARCH}.rpm"
          if [ ! -f "${LINUX_BUILD_DIR}/${DESIRED_RPM_NAME_FOR_CHECK}" ]; then
             if [ -z "${GENERATED_RPM_PATH}" ]; then
                echo "Error: RPM generation failed, so RPM file (${DESIRED_RPM_NAME_FOR_CHECK}) is missing."
             else
                echo "Error: RPM file not found in final destination! Expected: ${LINUX_BUILD_DIR}/${DESIRED_RPM_NAME_FOR_CHECK}"
             fi
             MISSING_FILES=true
          fi

          if [ "$MISSING_FILES" = true ]; then
            echo "One or more package files are missing. Failing the build."
            exit 1
          else
            echo "All required Linux packages found."
          fi

          # --- Cleanup ---
          echo "--- Cleaning up intermediate directories ---"
          rm -rf "${DEB_ROOT}" "${APPDIR}" "${ARCHIVE_CONTENT_DIR}"
          
          echo "--- Linux Packaging Complete ---"
      
      # macOS/iOS CocoaPods依赖清理
      - name: Clean CocoaPods cache and lock for mdk
        if: matrix.target == 'macOS' || matrix.target == 'iOS'
        run: |
          pod cache clean mdk
          find . -name Podfile.lock -delete
          rm -rf macos/Pods ios/Pods
      
      # 可选：清理flutter pub缓存
      - name: Clean flutter pub cache
        run: flutter pub cache clean
      
      # Upload Artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_path }}

  Publish:
    name: Publish
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Make tmp dir
        run: mkdir /tmp/artifacts
      
      - name: Download all Artifacts
        uses: actions/download-artifact@v4
        with:
          path: /tmp/artifacts
      
      - name: List all Artifacts
        run: ls -R /tmp/artifacts
      
      - name: Get commit message
        id: commit_message
        run: |
          echo "::set-output name=message::$(git log -1 --pretty=%B)"

      - name: Parse commit message
        id: parse_commit
        run: |
          full_message="$(git log -1 --pretty=%B)"
          title="$(echo "$full_message" | head -n1)"
          description="$(echo "$full_message" | tail -n +3)"
          echo "title=$title" >> $GITHUB_OUTPUT
          echo "description<<EOF" >> $GITHUB_OUTPUT
          echo "$description" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload to release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.Build.outputs.version }}
          name: Release v${{ needs.Build.outputs.version }}
          body: |
            ## 版本 v${{ needs.Build.outputs.version }}

            ### ${{ steps.parse_commit.outputs.title }}

            ${{ steps.parse_commit.outputs.description }}

            ### 构建信息
            - 提交: ${{ github.sha }}
            - 分支: ${{ github.ref_name }}
          allowUpdates: true
          # Updated artifacts list to include AppImage, tar.gz and RPM for Linux
          # Separate Linux patterns instead of using brace expansion
          artifacts: /tmp/artifacts/release-Android/*.apk,/tmp/artifacts/release-iOS/*.ipa,/tmp/artifacts/release-macOS/*.dmg,/tmp/artifacts/release-Windows/*.zip,/tmp/artifacts/release-Linux-amd64/*.deb,/tmp/artifacts/release-Linux-amd64/*.AppImage,/tmp/artifacts/release-Linux-amd64/*.tar.gz,/tmp/artifacts/release-Linux-amd64/*.rpm
          artifactErrorsFailBuild: true
          replacesArtifacts: true

  # Add new job for version update
  UpdateVersion:
    needs: [Build, Publish]
    if: github.ref == 'refs/heads/main' && success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Update version
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Get latest code
          git fetch origin refs/heads/main:refs/remotes/origin/main
          git checkout -B main refs/remotes/origin/main
          
          # Read and update version
          CURRENT_VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2)
          echo "Current version: $CURRENT_VERSION"
          
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "New version: $NEW_VERSION"
          
          # Update pubspec.yaml
          sed -i "s/^version: .*$/version: $NEW_VERSION/" pubspec.yaml
          
          # Commit and push changes
          git add pubspec.yaml
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git push origin refs/heads/main
