name: Build & Release

# Trigger on push to master branch or with a tag
on:
  push:
    branches:
      - '**'
    tags:
      - '0.*'

# If previous workflow is still running, we push again, we will cancel the previous workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  Build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: Android
            os: ubuntu-latest
            artifact_name: release-Android
            artifact_path: build/app/outputs/apk/release/*.apk
          - target: Windows
            os: windows-latest
            arch: x64
            artifact_name: release-Windows-x64
            artifact_path: build/windows/*x64.zip
          - target: Windows
            os: macos-latest
            arch: arm64
            artifact_name: release-Windows-arm64
            artifact_path: build/windows/*arm64.zip
          - target: Linux
            os: ubuntu-latest
            arch: amd64
            artifact_name: release-Linux-amd64
            artifact_path: build/linux/*amd64.deb
          - target: Linux
            os: ubuntu-latest
            arch: arm64
            artifact_name: release-Linux-arm64
            artifact_path: build/linux/*arm64.deb
          - target: iOS
            os: macos-latest
            cache_pod_key: ios-pods
            cache_pod_path: ios/Pods
            cache_pod_restore_keys_hash_file: ios/Podfile.lock
            artifact_name: release-iOS
            artifact_path: build/**/*.ipa
          - target: macOS
            os: macos-latest
            cache_pod_key: macos-pods
            cache_pod_path: macos/Pods
            cache_pod_restore_keys_hash_file: macos/Podfile.lock
            artifact_name: release-macOS
            artifact_path: ./*.dmg
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    runs-on: ${{ matrix.os }}
    env:
      FLUTTER_VERSION: 3.29.2
    steps:
      # Checkout branch
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      # Get app version
      - name: Get app version
        id: get_version
        run: |
          echo "::set-output name=version::$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2)"
      
      # Setup Android keystore (for Android)
      - name: Setup Android keystore
        if: matrix.target == 'Android'
        run: |
          echo "${{ secrets.ENCODED_KEYSTORE }}" | base64 -di > android/app/upload-keystore.jks
          echo "${{ secrets.KEY_PROPERTIES }}" > android/key.properties
      
      # Setup Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2.12.0
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
      
      # Cache CocoaPods (for iOS/macOS)
      - name: Cache Pod
        if: matrix.cache_pod_key != null
        uses: actions/cache@v4
        with:
          key: ${{ matrix.cache_pod_key }}
          path: ${{ matrix.cache_pod_path }}
          restore-keys: ${{ matrix.cache_pod_key }}-${{ hashFiles(matrix.cache_pod_restore_keys_hash_file) }}
      
      # Setup JDK for Android
      - name: Setup JDK 17 (Android)
        if: matrix.target == 'Android'
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: gradle
      
      # Xcode build for iOS/macOS
      - name: Build Xcode (iOS/macOS)
        if: matrix.os == 'macos-latest'
        run: xcodebuild -resolvePackageDependencies -workspace ios/Runner.xcworkspace -scheme Runner -configuration Release
      
      # Flutter Pub Get
      - name: Flutter Pub Get
        run: |
          git config --global core.longpaths true
          flutter pub get
      
      # Build Android .apk
      - name: Build Android
        if: matrix.target == 'Android'
        run: |
          flutter build apk --release --split-per-abi
          cd build/app/outputs/apk/release
          mv app-arm64-v8a-release.apk NipaPlay-${{ steps.get_version.outputs.version }}-Android-arm64.apk
          mv app-armeabi-v7a-release.apk NipaPlay-${{ steps.get_version.outputs.version }}-Android-arm32.apk
          mv app-x86_64-release.apk NipaPlay-${{ steps.get_version.outputs.version }}-Android-x86_64.apk
      
      # Build iOS .ipa
      - name: Build iOS
        if: matrix.target == 'iOS'
        run: |
          cd ios
          pod update
          cd ..
          flutter build ios --release --no-codesign
          sh thin-payload.sh build/ios/iphoneos/*.app
          cd build
          mkdir -p Payload
          mv ios/iphoneos/*.app Payload
          zip -9 NipaPlay_${{ steps.get_version.outputs.version }}_iOS_arm64.ipa -r Payload
      
      # Build macOS .dmg
      - name: Build macOS
        if: matrix.target == 'macOS'
        run: |
          cd macos
          pod update
          cd ..
          chmod +x dmg.sh
          ./dmg.sh
      
      # Set up Docker Buildx
      - name: Set up Docker Buildx
        if: (matrix.target == 'Linux' && matrix.arch == 'arm64') || (matrix.target == 'Windows' && matrix.arch == 'arm64')
        uses: docker/setup-buildx-action@v3
        with:
          platforms: windows/arm64
          driver-opts: |
            image=moby/buildkit:master
            network=host

      # Set up QEMU
      - name: Set up QEMU
        if: (matrix.target == 'Linux' && matrix.arch == 'arm64') || (matrix.target == 'Windows' && matrix.arch == 'arm64')
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      # Build Windows .zip
      - name: Build Windows
        if: matrix.target == 'Windows'
        shell: bash
        run: |
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            # Install QEMU and dependencies
            brew install qemu uutils-coreutils wget
            
            # Download Windows ARM64 VHDX
            mkdir -p win-arm64
            cd win-arm64
            wget https://www.microsoft.com/en-us/software-download/windowsinsiderpreviewARM64 -O win-arm64.vhdx
            
            # Create UEFI vars file
            dd if=/dev/zero of=flash0.img bs=1M count=64
            dd if=/dev/zero of=flash1.img bs=1M count=64
            
            # Start Windows ARM64 VM with HVF acceleration
            qemu-system-aarch64 \
              -name "windows-arm64-build" \
              -machine virt,highmem=off \
              -accel hvf \
              -cpu host \
              -smp 4 \
              -m 8G \
              -device ramfb \
              -device qemu-xhci \
              -device usb-kbd \
              -device usb-tablet \
              -drive if=pflash,format=raw,file=flash0.img \
              -drive if=pflash,format=raw,file=flash1.img \
              -drive if=virtio,file=win-arm64.vhdx,format=vhdx \
              -device virtio-net-pci,netdev=net0 \
              -netdev user,id=net0 \
              -device virtio-gpu-pci \
              -device usb-storage,drive=install \
              -drive if=none,id=install,format=raw,file=win-arm64.vhdx \
              -device virtio-rng-pci \
              -monitor telnet:127.0.0.1:55555,server,nowait \
              -display none \
              -daemonize
            
            # Wait for VM to boot
            echo "Waiting for VM to boot..."
            sleep 180
            
            # Setup build environment in VM via PowerShell remoting
            echo "Setting up build environment..."
            pwsh -Command {
              $securePassword = ConvertTo-SecureString "BuildPassword123!" -AsPlainText -Force
              $cred = New-Object System.Management.Automation.PSCredential ("BuildUser", $securePassword)
              
              # Copy project files
              $session = New-PSSession -ComputerName localhost -Credential $cred
              Copy-Item -Path ./* -Destination C:\build -ToSession $session -Recurse
              
              # Install Flutter and build
              Invoke-Command -Session $session -ScriptBlock {
                Set-Location C:\build
                # Install Flutter
                git clone https://github.com/flutter/flutter.git
                $env:Path += ";C:\build\flutter\bin"
                flutter config --enable-windows-desktop
                flutter doctor
                flutter build windows --release
              }
              
              # Copy build artifacts back
              Copy-Item -Path "C:\build\build\windows\*arm64.zip" -Destination "build\windows\" -FromSession $session
            }
            
            # Shutdown VM
            echo "Shutting down VM..."
            echo "system_powerdown" | nc localhost 55555
            
            cd ..
          else
            flutter config --enable-windows-desktop
            flutter build windows --release
            
            version="${{ steps.get_version.outputs.version }}"
            mkdir -p "build/windows/NipaPlay_${version}_Windows_x64"
            cp -r build/windows/x64/runner/Release/* "build/windows/NipaPlay_${version}_Windows_x64/"
            cp windows/*.dll "build/windows/NipaPlay_${version}_Windows_x64/" || true
            cd build/windows
            zip -r "NipaPlay_${version}_Windows_x64.zip" "NipaPlay_${version}_Windows_x64"
          fi
      
      # Build Linux .deb
      - name: Build Linux .deb
        if: matrix.target == 'Linux'
        shell: /usr/bin/bash -e {0}
        run: |
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            chmod +x build-arm64.sh
            
            # Enable Docker experimental features for buildx
            echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
            sudo service docker restart
            
            # Set up QEMU and buildx for ARM64
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
            docker buildx create --use
            
            # Build and load Docker image
            docker buildx build --platform linux/arm64 --load -t flutter-linux-arm64-builder -f Dockerfile.arm64 .
            
            # Run the build
            docker run --rm -v $(pwd):/app \
              --platform linux/arm64 \
              flutter-linux-arm64-builder \
              /app/build-arm64.sh
          else
            # AMD64 build remains unchanged
            sudo apt-get update -y
            sudo apt-get install -y mpv libmpv-dev pkg-config clang cmake libgtk-3-dev ninja-build libasound2-dev libass-dev
            
            flutter config --enable-linux-desktop
            flutter build linux --release
            
            mkdir -p build/linux/NipaPlay-${{ steps.get_version.outputs.version }}-Linux-${{ matrix.arch }}
            cd build/linux/NipaPlay-${{ steps.get_version.outputs.version }}-Linux-${{ matrix.arch }}
            mkdir -p opt/nipaplay usr/share/applications usr/share/icons/hicolor/512x512/apps
            cp -r ../x64/release/bundle/* opt/nipaplay
            mkdir -p DEBIAN
            chmod 0755 DEBIAN
            
            sed -e "s/VERSION_PLACEHOLDER/${{ steps.get_version.outputs.version }}/g" \
                -e "s/ARCH_PLACEHOLDER/amd64/g" \
                ../../../assets/linux/DEBIAN/control.template > DEBIAN/control
            
            if [ -f ../../../assets/linux/DEBIAN/postinst ]; then
              cp ../../../assets/linux/DEBIAN/postinst DEBIAN/
              chmod 0755 DEBIAN/postinst
            fi
            if [ -f ../../../assets/linux/DEBIAN/postrm ]; then
              cp ../../../assets/linux/DEBIAN/postrm DEBIAN/
              chmod 0755 DEBIAN/postrm
            fi
            
            cp ../../../assets/linux/io.github.MCDFsteve.NipaPlay-Reload.desktop usr/share/applications
            cp ../../../assets/images/logo512.png usr/share/icons/hicolor/512x512/apps/io.github.MCDFsteve.NipaPlay-Reload.png
            cd ..
            dpkg-deb --build --root-owner-group NipaPlay-${{ steps.get_version.outputs.version }}-Linux-${{ matrix.arch }}
          fi
      
      # Upload Artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_path }}

  Publish:
    name: Publish
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Make tmp dir
        run: mkdir /tmp/artifacts
      
      - name: Download all Artifacts
        uses: actions/download-artifact@v4
        with:
          path: /tmp/artifacts
      
      - name: List all Artifacts
        run: ls -R /tmp/artifacts
      
      - name: Get commit message
        id: commit_message
        run: |
          echo "::set-output name=message::$(git log -1 --pretty=%B)"
      
      - name: Get commit range
        id: commit_range
        run: |
          echo "::set-output name=range::$(git log --pretty=format:'- %s' -n 10)"
      
      - name: Upload to release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.Build.outputs.version }}
          name: Release v${{ needs.Build.outputs.version }}
          body: |
            ## 版本 v${{ needs.Build.outputs.version }}
            
            ### 主要更新
            ${{ steps.commit_message.outputs.message }}
            
            ### 最近更新内容
            ${{ steps.commit_range.outputs.range }}
            
            ### 构建信息
            - 构建时间: ${{ github.event.head_commit.timestamp }}
            - 提交: ${{ github.sha }}
            - 分支: ${{ github.ref_name }}
          allowUpdates: true
          artifacts: /tmp/artifacts/release-Android/*.apk,/tmp/artifacts/release-iOS/*.ipa,/tmp/artifacts/release-macOS/*.dmg,/tmp/artifacts/release-Windows/*.zip,/tmp/artifacts/release-Linux-amd64/*.deb,/tmp/artifacts/release-Linux-arm64/*.deb
          artifactErrorsFailBuild: true
          replacesArtifacts: true

  # Add new job for version update
  UpdateVersion:
    needs: [Build, Publish]
    if: github.ref == 'refs/heads/main' && success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Update version
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Get latest code
          git fetch origin refs/heads/main:refs/remotes/origin/main
          git checkout -B main refs/remotes/origin/main
          
          # Read and update version
          CURRENT_VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2)
          echo "Current version: $CURRENT_VERSION"
          
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "New version: $NEW_VERSION"
          
          # Update pubspec.yaml
          sed -i "s/^version: .*$/version: $NEW_VERSION/" pubspec.yaml
          
          # Commit and push changes
          git add pubspec.yaml
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git push origin refs/heads/main
