name: Build & Release

# Trigger on push to master branch or with a tag
on:
  push:
    branches:
      - '**'
    tags:
      - '0.*'

# If previous workflow is still running, we push again, we will cancel the previous workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  Build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: Android
            os: ubuntu-latest
            artifact_name: release-Android
            artifact_path: build/app/outputs/apk/release/*.apk
          - target: Windows
            os: windows-latest
            artifact_name: release-Windows
            artifact_path: build/windows/*.zip
          - target: Linux
            os: ubuntu-latest
            arch: amd64
            artifact_name: release-Linux-amd64
            artifact_path: build/linux/*amd64.deb
          - target: Linux
            os: ubuntu-latest
            arch: arm64
            artifact_name: release-Linux-arm64
            artifact_path: build/linux/*arm64.deb
          - target: iOS
            os: macos-latest
            cache_pod_key: ios-pods
            cache_pod_path: ios/Pods
            cache_pod_restore_keys_hash_file: ios/Podfile.lock
            artifact_name: release-iOS
            artifact_path: build/**/*.ipa
          - target: macOS
            os: macos-latest
            cache_pod_key: macos-pods
            cache_pod_path: macos/Pods
            cache_pod_restore_keys_hash_file: macos/Podfile.lock
            artifact_name: release-macOS
            artifact_path: ./*.dmg
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    runs-on: ${{ matrix.os }}
    env:
      FLUTTER_VERSION: 3.29.2
    steps:
      # Checkout branch
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      # Get app version
      - name: Get app version
        id: get_version
        run: |
          echo "::set-output name=version::$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2)"
      
      # Setup Android keystore (for Android)
      - name: Setup Android keystore
        if: matrix.target == 'Android'
        run: |
          echo "${{ secrets.ENCODED_KEYSTORE }}" | base64 -di > android/app/upload-keystore.jks
          echo "${{ secrets.KEY_PROPERTIES }}" > android/key.properties
      
      # Setup Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2.12.0
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
      
      # Cache CocoaPods (for iOS/macOS)
      - name: Cache Pod
        if: matrix.cache_pod_key != null
        uses: actions/cache@v4
        with:
          key: ${{ matrix.cache_pod_key }}
          path: ${{ matrix.cache_pod_path }}
          restore-keys: ${{ matrix.cache_pod_key }}-${{ hashFiles(matrix.cache_pod_restore_keys_hash_file) }}
      
      # Setup JDK for Android
      - name: Setup JDK 17 (Android)
        if: matrix.target == 'Android'
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: gradle
      
      # Xcode build for iOS/macOS
      - name: Build Xcode (iOS/macOS)
        if: matrix.os == 'macos-latest'
        run: xcodebuild -resolvePackageDependencies -workspace ios/Runner.xcworkspace -scheme Runner -configuration Release
      
      # Flutter Pub Get
      - name: Flutter Pub Get
        run: |
          git config --global core.longpaths true
          flutter pub get
      
      # Build Android .apk
      - name: Build Android
        if: matrix.target == 'Android'
        run: |
          flutter build apk --release --split-per-abi
          cd build/app/outputs/apk/release
          mv app-arm64-v8a-release.apk NipaPlay-${{ steps.get_version.outputs.version }}-Android-arm64.apk
          mv app-armeabi-v7a-release.apk NipaPlay-${{ steps.get_version.outputs.version }}-Android-arm32.apk
          mv app-x86_64-release.apk NipaPlay-${{ steps.get_version.outputs.version }}-Android-x86_64.apk
      
      # Build iOS .ipa
      - name: Build iOS
        if: matrix.target == 'iOS'
        run: |
          cd ios
          pod update
          cd ..
          flutter build ios --release --no-codesign
          sh thin-payload.sh build/ios/iphoneos/*.app
          cd build
          mkdir -p Payload
          mv ios/iphoneos/*.app Payload
          zip -9 NipaPlay_${{ steps.get_version.outputs.version }}_iOS_arm64.ipa -r Payload
      
      # Build macOS .dmg
      - name: Build macOS
        if: matrix.target == 'macOS'
        run: |
          cd macos
          pod update
          cd ..
          sh dmg.sh
          mv NipaPlay_${{ steps.get_version.outputs.version }}.dmg NipaPlay_${{ steps.get_version.outputs.version }}_macOS_arm64.dmg
      
      # Build Windows .zip
      - name: Build Windows
        if: matrix.target == 'Windows'
        run: |
          flutter build windows --release
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            $DestDir = "build\windows\NipaPlay_${{ steps.get_version.outputs.version }}_Windows_arm64"
            $SrcDir = "build\windows\arm64\runner\Release"
          } else {
            $DestDir = "build\windows\NipaPlay_${{ steps.get_version.outputs.version }}_Windows_x64"
            $SrcDir = "build\windows\x64\runner\Release"
          }
          New-Item -Path $DestDir -ItemType Directory
          Copy-Item $SrcDir\* -Recurse $DestDir
          Copy-Item -Filter *.dll -Path windows\* -Destination $DestDir -Force
          Compress-Archive $DestDir build\windows\NipaPlay_${{ steps.get_version.outputs.version }}_Windows_${{ matrix.arch }}.zip
      
      # Build Linux .deb
      - name: Build Linux .deb
        if: matrix.target == 'Linux'
        run: |
          # 安装 mpv 和其他依赖
          sudo apt-get update -y
          sudo apt-get install -y mpv libmpv-dev pkg-config clang cmake libgtk-3-dev ninja-build libasound2-dev libass-dev gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

          # 设置交叉编译环境（仅用于 ARM64）
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            export CC=aarch64-linux-gnu-gcc
            export CXX=aarch64-linux-gnu-g++
            export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig
          fi
          
          # 构建 Flutter for Linux
          flutter config --enable-linux-desktop
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            flutter build linux --release --target-platform linux-arm64
          else
            flutter build linux --release
          fi
          
          # 检查构建产物目录
          echo "Listing build output:"
          ls build/linux/*/release/
          ls build/linux/*/release/bundle/
          
          # 创建 .deb 包
          mkdir -p build/linux/NipaPlay-${{ steps.get_version.outputs.version }}-Linux-${{ matrix.arch }}
          cd build/linux/NipaPlay-${{ steps.get_version.outputs.version }}-Linux-${{ matrix.arch }}
          mkdir -p opt/nipaplay
          mkdir -p usr/share/applications
          mkdir -p usr/share/icons/hicolor/512x512/apps
          
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            cp -r ../arm64/release/bundle/* opt/nipaplay
          else
            cp -r ../x64/release/bundle/* opt/nipaplay
          fi
          
          cp -r ../../../assets/linux/DEBIAN .
          chmod 0755 DEBIAN/postinst
          chmod 0755 DEBIAN/postrm
          cat > DEBIAN/control <<EOF
          Maintainer: madoka773 <valigarmanda55@gmail.com>
          Package: NipaPlay
          Version: ${{ steps.get_version.outputs.version }}
          Section: x11
          Priority: optional
          Architecture: ${{ matrix.arch }}
          Essential: no
          Installed-Size: 34648
          Description: A cross platform danmaku video player.
          Homepage: https://github.com/MCDFsteve/NipaPlay-Reload
          Depends: ffmpeg, libass9
          EOF
          cp ../../../assets/linux/io.github.MCDFsteve.NipaPlay-Reload.desktop usr/share/applications
          cp ../../../assets/images/logo512.png usr/share/icons/hicolor/512x512/apps/io.github.MCDFsteve.NipaPlay-Reload.png
          cd ..
          dpkg-deb --build --root-owner-group NipaPlay-${{ steps.get_version.outputs.version }}-Linux-${{ matrix.arch }}
      
      # Upload Artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_path }}

  Publish:
    name: Publish
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Make tmp dir
        run: mkdir /tmp/artifacts
      
      - name: Download all Artifacts
        uses: actions/download-artifact@v4
        with:
          path: /tmp/artifacts
      
      - name: List all Artifacts
        run: ls -R /tmp/artifacts
      
      - name: Get commit message
        id: commit_message
        run: |
          echo "::set-output name=message::$(git log -1 --pretty=%B)"
      
      - name: Get commit range
        id: commit_range
        run: |
          echo "::set-output name=range::$(git log --pretty=format:'- %s' -n 10)"
      
      - name: Upload to release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.Build.outputs.version }}
          name: Release v${{ needs.Build.outputs.version }}
          body: |
            ## 版本 v${{ needs.Build.outputs.version }}
            
            ### 主要更新
            ${{ steps.commit_message.outputs.message }}
            
            ### 最近更新内容
            ${{ steps.commit_range.outputs.range }}
            
            ### 构建信息
            - 构建时间: ${{ github.event.head_commit.timestamp }}
            - 提交: ${{ github.sha }}
            - 分支: ${{ github.ref_name }}
          allowUpdates: true
          artifacts: /tmp/artifacts/release-Android/*.apk,/tmp/artifacts/release-iOS/*.ipa,/tmp/artifacts/release-macOS/*.dmg,/tmp/artifacts/release-Windows/*.zip,/tmp/artifacts/release-Linux-amd64/*.deb,/tmp/artifacts/release-Linux-arm64/*.deb
          artifactErrorsFailBuild: true
          replacesArtifacts: true

  # Add new job for version update
  UpdateVersion:
    needs: [Build, Publish]
    if: github.ref == 'refs/heads/main' && success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Update version
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Get latest code
          git fetch origin refs/heads/main:refs/remotes/origin/main
          git checkout -B main refs/remotes/origin/main
          
          # Read and update version
          CURRENT_VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2)
          echo "Current version: $CURRENT_VERSION"
          
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "New version: $NEW_VERSION"
          
          # Update pubspec.yaml
          sed -i "s/^version: .*$/version: $NEW_VERSION/" pubspec.yaml
          
          # Commit and push changes
          git add pubspec.yaml
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git push origin refs/heads/main
