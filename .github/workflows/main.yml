name: Build and Release

# Trigger on push to master branch or with a tag
on:
  push:
    branches: [ main ]
    tags: [ '0.*' ]
  pull_request:
    branches: [ main ]

# If previous workflow is still running, we push again, we will cancel the previous workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Get version
        id: get_version
        run: echo "version=$(date +'%Y%m%d%H%M')" >> $GITHUB_OUTPUT

  build:
    needs: get-version
    strategy:
      fail-fast: false
      matrix:
        target: [Windows, Linux, macOS]
        include:
          - target: Windows
            os: windows-latest
            arch: x64
          - target: Linux
            os: ubuntu-latest
            arch: x64
          - target: macOS
            os: macos-latest
            arch: x64
          - target: macOS
            os: macos-latest
            arch: arm64
    runs-on: ${{ matrix.os }}
    env:
      FLUTTER_VERSION: 3.29.2
    steps:
      # Checkout branch
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      # Get app version
      - name: Get app version
        id: get_version
        run: |
          echo "::set-output name=version::$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2)"
      
      # Setup Android keystore (for Android)
      - name: Setup Android keystore
        if: matrix.target == 'Android'
        run: |
          echo "${{ secrets.ENCODED_KEYSTORE }}" | base64 -di > android/app/upload-keystore.jks
          echo "${{ secrets.KEY_PROPERTIES }}" > android/key.properties
      
      # Setup Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          architecture: ${{ matrix.arch }}
      
      # Cache CocoaPods (for iOS/macOS)
      - name: Cache Pod
        if: matrix.cache_pod_key != null
        uses: actions/cache@v4
        with:
          key: ${{ matrix.cache_pod_key }}
          path: ${{ matrix.cache_pod_path }}
          restore-keys: ${{ matrix.cache_pod_key }}-${{ hashFiles(matrix.cache_pod_restore_keys_hash_file) }}
      
      # Setup JDK for Android
      - name: Setup JDK 17 (Android)
        if: matrix.target == 'Android'
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: gradle
      
      # Xcode build for iOS/macOS
      - name: Build Xcode (iOS/macOS)
        if: matrix.os == 'macos-latest'
        run: xcodebuild -resolvePackageDependencies -workspace ios/Runner.xcworkspace -scheme Runner -configuration Release
      
      # Flutter Pub Get
      - name: Flutter Pub Get
        run: |
          git config --global core.longpaths true
          flutter pub get
      
      # Build Android .apk
      - name: Build Android
        if: matrix.target == 'Android'
        run: |
          flutter build apk --release --split-per-abi
          cd build/app/outputs/apk/release
          mv app-arm64-v8a-release.apk NipaPlay-${{ steps.get_version.outputs.version }}-Android-arm64.apk
          mv app-armeabi-v7a-release.apk NipaPlay-${{ steps.get_version.outputs.version }}-Android-arm32.apk
          mv app-x86_64-release.apk NipaPlay-${{ steps.get_version.outputs.version }}-Android-x86_64.apk
      
      # Build iOS .ipa
      - name: Build iOS
        if: matrix.target == 'iOS'
        run: |
          cd ios
          pod update
          cd ..
          flutter build ios --release --no-codesign
          sh thin-payload.sh build/ios/iphoneos/*.app
          cd build
          mkdir -p Payload
          mv ios/iphoneos/*.app Payload
          zip -9 NipaPlay_${{ steps.get_version.outputs.version }}_iOS_arm64.ipa -r Payload
      
      # Build macOS .dmg
      - name: Build macOS
        if: matrix.target == 'macOS'
        run: |
          cd macos
          pod update
          cd ..
          chmod +x dmg.sh
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            ./dmg.sh
          else
            # Build for x86_64
            flutter build macos --release --target-platform darwin-x64
            ./dmg.sh
          fi
      
      # Set up Docker Buildx
      - name: Setup Docker for macOS
        if: runner.os == 'macOS' && (matrix.target == 'Linux' && matrix.arch == 'arm64') || (matrix.target == 'Windows' && matrix.arch == 'arm64')
        run: |
          # Install Docker and Colima
          brew install docker docker-compose colima
          
          # Configure Docker plugins
          mkdir -p ~/.docker
          echo '{"cliPluginsExtraDirs": ["/opt/homebrew/lib/docker/cli-plugins"]}' > ~/.docker/config.json
          
          # Start Colima with ARM64 support
          colima start --arch aarch64 --memory 8
          
          # Configure Docker socket
          sudo ln -sf $HOME/.colima/default/docker.sock /var/run/docker.sock
          
          # Verify Docker is running
          docker info

      - name: Set up Docker Buildx
        if: (matrix.target == 'Linux' && matrix.arch == 'arm64') || (matrix.target == 'Windows' && matrix.arch == 'arm64')
        uses: docker/setup-buildx-action@v3
        with:
          platforms: windows/arm64
          driver-opts: |
            image=moby/buildkit:master
            network=host
          driver: docker-container

      # Set up QEMU
      - name: Set up QEMU
        if: (matrix.target == 'Linux' && matrix.arch == 'arm64') || (matrix.target == 'Windows' && matrix.arch == 'arm64')
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      # Build Windows .zip
      - name: Build Windows
        if: matrix.target == 'Windows'
        shell: pwsh
        run: |
          flutter config --enable-windows-desktop
          flutter build windows --release
          
          $version = "${{ steps.get_version.outputs.version }}"
          $buildDir = "build/windows/NipaPlay_${version}_Windows_x64"
          New-Item -ItemType Directory -Force -Path $buildDir
          
          Copy-Item -Path "build/windows/x64/runner/Release/*" -Destination $buildDir -Recurse
          Copy-Item -Path "windows/*.dll" -Destination $buildDir -ErrorAction SilentlyContinue
          
          Set-Location build/windows
          Compress-Archive -Path "NipaPlay_${version}_Windows_x64" -DestinationPath "NipaPlay_${version}_Windows_x64.zip" -Force

      # Build Linux .deb
      - name: Build Linux .deb
        if: matrix.target == 'Linux'
        shell: /usr/bin/bash -e {0}
        run: |
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            chmod +x build-arm64.sh
            
            # Enable Docker experimental features for buildx
            echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
            sudo service docker restart
            
            # Set up QEMU and buildx for ARM64
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
            docker buildx create --use
            
            # Build and load Docker image
            docker buildx build --platform linux/arm64 --load -t flutter-linux-arm64-builder -f Dockerfile.arm64 .
            
            # Run the build
            docker run --rm -v $(pwd):/app \
              --platform linux/arm64 \
              flutter-linux-arm64-builder \
              /app/build-arm64.sh
          else
            # AMD64 build remains unchanged
            sudo apt-get update -y
            sudo apt-get install -y mpv libmpv-dev pkg-config clang cmake libgtk-3-dev ninja-build libasound2-dev libass-dev
            
            flutter config --enable-linux-desktop
            flutter build linux --release
            
            mkdir -p build/linux/NipaPlay-${{ steps.get_version.outputs.version }}-Linux-${{ matrix.arch }}
            cd build/linux/NipaPlay-${{ steps.get_version.outputs.version }}-Linux-${{ matrix.arch }}
            mkdir -p opt/nipaplay usr/share/applications usr/share/icons/hicolor/512x512/apps
            cp -r ../x64/release/bundle/* opt/nipaplay
            mkdir -p DEBIAN
            chmod 0755 DEBIAN
            
            sed -e "s/VERSION_PLACEHOLDER/${{ steps.get_version.outputs.version }}/g" \
                -e "s/ARCH_PLACEHOLDER/amd64/g" \
                ../../../assets/linux/DEBIAN/control.template > DEBIAN/control
            
            if [ -f ../../../assets/linux/DEBIAN/postinst ]; then
              cp ../../../assets/linux/DEBIAN/postinst DEBIAN/
              chmod 0755 DEBIAN/postinst
            fi
            if [ -f ../../../assets/linux/DEBIAN/postrm ]; then
              cp ../../../assets/linux/DEBIAN/postrm DEBIAN/
              chmod 0755 DEBIAN/postrm
            fi
            
            cp ../../../assets/linux/io.github.MCDFsteve.NipaPlay-Reload.desktop usr/share/applications
            cp ../../../assets/images/logo512.png usr/share/icons/hicolor/512x512/apps/io.github.MCDFsteve.NipaPlay-Reload.png
            cd ..
            dpkg-deb --build --root-owner-group NipaPlay-${{ steps.get_version.outputs.version }}-Linux-${{ matrix.arch }}
          fi
      
      # Upload Artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-${{ matrix.arch }}
          path: ${{ matrix.target }}-${{ matrix.arch }}

  Publish:
    name: Publish
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Make tmp dir
        run: mkdir /tmp/artifacts
      
      - name: Download all Artifacts
        uses: actions/download-artifact@v4
        with:
          path: /tmp/artifacts
      
      - name: List all Artifacts
        run: ls -R /tmp/artifacts
      
      - name: Get commit message
        id: commit_message
        run: |
          echo "::set-output name=message::$(git log -1 --pretty=%B)"
      
      - name: Get commit range
        id: commit_range
        run: |
          echo "::set-output name=range::$(git log --pretty=format:'- %s' -n 10)"
      
      - name: Upload to release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.build.outputs.version }}
          name: Release v${{ needs.build.outputs.version }}
          body: |
            ## 版本 v${{ needs.build.outputs.version }}
            
            ### 主要更新
            ${{ steps.commit_message.outputs.message }}
            
            ### 最近更新内容
            ${{ steps.commit_range.outputs.range }}
            
            ### 构建信息
            - 构建时间: ${{ github.event.head_commit.timestamp }}
            - 提交: ${{ github.sha }}
            - 分支: ${{ github.ref_name }}
          allowUpdates: true
          artifacts: /tmp/artifacts/release-Android/*.apk,/tmp/artifacts/release-iOS/*.ipa,/tmp/artifacts/release-macOS/*.dmg,/tmp/artifacts/release-Windows/*.zip,/tmp/artifacts/release-Linux-amd64/*.deb,/tmp/artifacts/release-Linux-arm64/*.deb
          artifactErrorsFailBuild: true
          replacesArtifacts: true

  # Add new job for version update
  UpdateVersion:
    needs: [build, Publish]
    if: github.ref == 'refs/heads/main' && success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Update version
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Get latest code
          git fetch origin refs/heads/main:refs/remotes/origin/main
          git checkout -B main refs/remotes/origin/main
          
          # Read and update version
          CURRENT_VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2)
          echo "Current version: $CURRENT_VERSION"
          
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "New version: $NEW_VERSION"
          
          # Update pubspec.yaml
          sed -i "s/^version: .*$/version: $NEW_VERSION/" pubspec.yaml
          
          # Commit and push changes
          git add pubspec.yaml
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git push origin refs/heads/main
